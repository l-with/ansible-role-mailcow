---

- name: Ensure mailcow.conf generated
  ansible.builtin.command: ./generate_config.sh
  environment:
    MAILCOW_HOSTNAME: "{{ mailcow_hostname }}"
    MAILCOW_BRANCH: "{{ mailcow_branch }}"
    MAILCOW_TZ: "{{ mailcow_timezone }}"
  args:
    chdir: "{{ mailcow_install_path }}"
    creates: mailcow.conf

- name: Ensure API key
  ansible.builtin.blockinfile:
    path: "{{ mailcow_install_path }}/mailcow.conf"
    backup: true
    marker: "### {mark} ANSIBLE MANAGED BLOCK (API_KEY)"
    insertafter: "#API_KEY="
    block: |
      API_KEY={{ mailcow_api_key }}
  when: mailcow_api_key is defined

- name: Ensure SUBMISSION_PORT in mailcow.conf
  ansible.builtin.lineinfile:
    path:   "{{ mailcow_install_path }}/mailcow.conf"
    backup: true
    regexp: SUBMISSION_PORT=
    line:   "SUBMISSION_PORT={{ mailcow_submission_port }}"

- name: Ensure SUBMISSION_PORT in docker-compose.yml for php-fpm-mailcow
  ansible.builtin.lineinfile:
    path:   "{{ mailcow_install_path }}/docker-compose.yml"
    backup: true
    regexp: '- SUBMISSION_PORT=\${SUBMISSION_PORT:-\d+}'
    line: "        - SUBMISSION_PORT=${SUBMISSION_PORT:-{{ mailcow_submission_port }}}"
        
- name: Ensure SUBMISSION_PORT in docker-compose.yml for postfix-mailcow
  ansible.builtin.lineinfile:
    path:   "{{ mailcow_install_path }}/docker-compose.yml"
    backup: true
    regexp: '- "\${SUBMISSION_PORT:-\d+}:\d+"'
    line:   "        - \"${SUBMISSION_PORT:-{{ mailcow_submission_port }}}:{{ mailcow_submission_port }}\""

- name: Ensure API key read.only
  ansible.builtin.blockinfile:
    path: "{{ mailcow_install_path }}/mailcow.conf"
    backup: true
    marker: "### {mark} ANSIBLE MANAGED BLOCK (API_KEY_READ_ONLY)"
    insertafter: "#API_KEY_READ_ONLY="
    block: |
      API_KEY_READ_ONLY={{ mailcow_api_key_read_only }}
  when: mailcow_api_key_read_only is defined

- name: Ensure API allow from
  ansible.builtin.blockinfile:
    path: "{{ mailcow_install_path }}/mailcow.conf"
    backup: true
    marker: "### {mark} ANSIBLE MANAGED BLOCK (API_ALLOW_FROM)"
    insertafter: "#API_ALLOW_FROM="
    block: |
      API_ALLOW_FROM={{ mailcow_api_allow_from | join(',') }}
  when: mailcow_api_allow_from is defined

- name: Ensure ADDITIONAL_SAN
  ansible.builtin.lineinfile:
    path: "{{ mailcow_install_path }}/mailcow.conf"
    backup: true
    regexp: ADDITIONAL_SAN=
    line: "ADDITIONAL_SAN={{ mailcow_additional_san }}"

- name: Ensure ACME staging
  ansible.builtin.blockinfile:
    path: "{{ mailcow_install_path }}/mailcow.conf"
    backup: true
    marker: "### {mark} ANSIBLE MANAGED BLOCK (LE_STAGING)"
    insertafter: EOF
    block: |
      LE_STAGING=y
  when: mailcow_acme_staging

- name: Ensure Skip Let's Encrypt
  ansible.builtin.lineinfile:
    path: "{{ mailcow_install_path }}/mailcow.conf"
    backup: true
    regexp: SKIP_LETS_ENCRYPT=
    line: SKIP_LETS_ENCRYPT=y
  when: mailcow_acme != 'out-of-the-box'

- name: Ensure DOVECOT_MASTER_USER
  ansible.builtin.lineinfile:
    path:  "{{ mailcow_install_path }}/mailcow.conf"
    backup: true
    regexp: DOVECOT_MASTER_USER=
    line:   "DOVECOT_MASTER_USER={{ mailcow_dovecot_master_user }}"
  when: not mailcow_dovecot_master_auto_generated

- name: Ensure DOVECOT_MASTER_PASS
  ansible.builtin.lineinfile:
    path:  "{{ mailcow_install_path }}/mailcow.conf"
    backup: true
    regexp: DOVECOT_MASTER_PASS=
    line:   "DOVECOT_MASTER_PASS={{ mailcow_dovecot_master_password }}"
  when: not mailcow_dovecot_master_auto_generated

...
